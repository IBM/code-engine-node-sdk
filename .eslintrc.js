module.exports = {
  parser: '@typescript-eslint/parser',
  plugins: ['@typescript-eslint'],
  extends: ['airbnb', 'eslint:recommended', 'plugin:@typescript-eslint/recommended'],
  env: {
    browser: true,
    jasmine: true,
    jquery: true,
    jest: true,
  },
  globals: {
    analytics: true,
  },
  rules: {
    // This block has rules that we either had before, or that I (personal opinion) either didn't
    // consider to be important, or not controversial.
    'no-console': 'off',
    'no-script-url': 'off',
    'max-len': 'off',
    'no-param-reassign': 'off',
    'no-underscore-dangle': 'off',
    camelcase: 'off',
    'react/jsx-no-target-blank': 'error',
    'react/jsx-uses-react': 'error',
    'react/jsx-uses-vars': 'error',
    'spaced-comment': 'off',
    'import/extensions': 'off',
    'import/order': 'off',
    'import/newline-after-import': 'warn',
    'import/prefer-default-export': 'off',
    'import/no-extraneous-dependencies': 'off',
    'no-restricted-syntax': 'off',
    'no-plusplus': 'warn',
    'jsx-quotes': 'off',
    'react/jsx-curly-brace-presence': 'warn',
    'react/destructuring-assignment': 'off',
    'react/sort-comp': 'off',
    'max-classes-per-file': 'off',
    'react/jsx-boolean-value': 'off',
    'react/forbid-prop-types': 'off',
    'react/jsx-fragments': 'warn',
    '@typescript-eslint/ban-ts-comment': 'warn',
    'no-nested-ternary': 'warn',
    'jsx-a11y/label-has-associated-control': 'warn',
    'jsx-a11y/control-has-associated-label': 'warn',
    'jsx-a11y/tabindex-no-positive': 'warn',
    'operator-assignment': 'off',
    'no-restricted-properties': 'warn',
    'react/jsx-props-no-spreading': 'off',
    'react/jsx-filename-extension': [1, { extensions: ['.tsx', '.jsx'] }],
    'react/jsx-curly-newline': 'off',
    '@typescript-eslint/no-inferrable-types': 'off',
    '@typescript-eslint/no-extra-semi': 'off',
    // the base rule is buggy and must be disabled
    'no-use-before-define': 'off',
    'react/function-component-definition': 'off',

    // Formatting where prettier has a different opinion. These should remain off,
    // or we'll have two pre-commit hooks that contradict each other.
    'object-curly-newline': 'off',
    'operator-linebreak': 'off',
    'lines-between-class-members': 'off',
    'function-paren-newline': 'off',
    'implicit-arrow-linebreak': 'off',
    'newline-per-chained-call': 'off',
    'no-multiple-empty-lines': 'off',
    'no-trailing-spaces': 'off',
    'react/jsx-wrap-multilines': 'off',
    'react/display-name': 'off',
    indent: 'off',
    'react/jsx-one-expression-per-line': 'off',
    'react/jsx-indent': 'off',

    // More "modern" JS styles. Some of these would be a lot of work to enabel.
    'comma-dangle': 'off',
    'arrow-body-style': 'off',
    'prefer-object-spread': 'warn',
    'prefer-rest-params': 'warn',
    'prefer-destructuring': 'off',
    'prefer-template': 'warn',
    'prefer-arrow-callback': 'off',

    // Not sure about this one. We can't easily enable it because we violate it all over the backend
    'import/no-import-module-exports': 'off',

    // Anything below here I think should really be errors. Turning them into warnings now
    // because I can't fix them all at once. In no particular order.
    'no-confusing-arrow': 'warn',
    'no-useless-constructor': 'warn',
    'no-extra-boolean-cast': 'warn',
    'no-sequences': 'warn',
    quotes: 'warn',
    'no-shadow-restricted-names': 'warn',
    eqeqeq: 'warn',
    'no-prototype-builtins': 'warn',
    'no-var': 'warn',
    // For typescript, it is recommended to turn this off as it is checked by typescript
    'no-undef': 'off',
    'array-callback-return': 'warn',
    'no-unneeded-ternary': 'warn',
    'no-path-concat': 'warn',
    'no-case-declarations': 'warn',
    'no-useless-return': 'warn',
    'no-continue': 'warn',
    'no-lonely-if': 'warn',
    'default-case': 'warn',
    'no-multi-assign': 'warn',
    'prefer-const': 'warn',
    'no-async-promise-executor': 'warn',
    // this gives false positives for typescript enums; enable the corresponding typescript rule instead
    'no-shadow': 'off',
    'no-useless-escape': 'warn',
    'no-else-return': 'off',
    'import/no-useless-path-segments': 'off',
    'import/no-duplicates': 'warn',
    'import/no-mutable-exports': 'warn',
    'import/no-dynamic-require': 'warn',
    'import/no-self-import': 'off',
    'global-require': 'warn',
    'object-shorthand': 'warn',
    'no-unused-expressions': 'warn',
    'dot-notation': 'warn',
    'no-await-in-loop': 'warn',
    'prefer-promise-reject-errors': 'warn',
    'no-restricted-globals': 'warn',
    'class-methods-use-this': 'off',
    '@typescript-eslint/no-use-before-define': ['off'],
    '@typescript-eslint/no-empty-interface': 'warn',
    '@typescript-eslint/no-var-requires': 'off',
    '@typescript-eslint/no-this-alias': 'warn',
    '@typescript-eslint/no-namespace': 'off',
    '@typescript-eslint/ban-types': 'warn',
    '@typescript-eslint/no-shadow': 'error',
    'react/prop-types': 'off',
    'react/no-access-state-in-setstate': 'warn',
    'react/require-default-props': 'off',
    'react/no-unused-prop-types': 'warn',
    'react/jsx-no-bind': 'warn',
    'react/no-did-update-set-state': 'warn',
    'react/no-unused-state': 'warn',
    'react/static-property-placement': 'warn',
    'react/no-unescaped-entities': 'warn',
    'react/no-children-prop': 'warn',
    'react/no-direct-mutation-state': 'warn',
    'react/default-props-match-prop-types': 'warn',
    'react/prefer-stateless-function': 'warn',
    'react/jsx-key': 'warn',
    'jsx-a11y/no-static-element-interactions': 'warn',
    'jsx-a11y/click-events-have-key-events': 'warn',
    'jsx-a11y/aria-props': 'warn',
    'jsx-a11y/anchor-is-valid': 'warn',
    'no-return-assign': 'warn',
    'consistent-return': 'warn',
    'import/first': 'warn',
    'default-param-last': 'warn',
    // The following rules seem sensible, but we violate them in so many places that I disable them for now
    'import/no-named-as-default': 'warn',
    'import/no-cycle': 'warn',
    'import/no-named-as-default-member': 'warn',
    'import/no-unresolved': 'off',
    'padded-blocks': 'off',
    'quote-props': 'off'
  },
  settings: {
    'import/parsers': {
      '@typescript-eslint/parser': ['.ts', '.tsx'],
    },
    'import/resolver': {
      // "node": {
      //   "paths": [path.resolve(__dirname, './src')]
      // },
      typescript: {
        project: './tsconfig.json',
      },
    },
    react: {
      createClass: 'createReactClass', // Regex for Component Factory to use,
      // default to "createReactClass"
      pragma: 'React', // Pragma to use, default to "React"
      version: 'detect', // React version. "detect" automatically picks the version you have installed.
      // You can also use `16.0`, `16.3`, etc, if you want to override the detected value.
      // default to latest and warns if missing
      // It will default to "detect" in the future
    },
  },
  parserOptions: {
    ecmaFeatures: {
      jsx: true,
    },
  },
};
